 Ques - You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.


//Function below
 
 
 int orangesRotting(vector<vector<int>>& grid) {
       
    int fresh = 0, min=0; 
    int m = grid.size(), n= grid[0].size();
    
    queue<pair<int, int>> q;


    for(int i=0; i<m; ++i)
    {
      for(int j=0; j<n; ++j)
      {
        if(grid[i][j] == 2)
        q.push(make_pair(i,j));

        if(grid[i][j] == 1)
        fresh++;
        
      }
    }

    int sz = q.size();

    while(fresh && !q.empty())
    {
      int r = q.front().first;
      int c = q.front().second;

      if(r>0 && grid[r-1][c] == 1)
      {
        grid[r-1][c] = 2;
        fresh--;
        q.push(make_pair(r-1, c));
      }
       if(c>0 && grid[r][c-1] == 1)
      {
        grid[r][c-1] = 2;
        fresh--;
        q.push(make_pair(r, c-1));
      }
       if(r<m-1 && grid[r+1][c] == 1)
      {
        grid[r+1][c] = 2;
        fresh--;
        q.push(make_pair(r+1, c));
      }
       if(c<n-1 && grid[r][c+1] == 1)
      {
        grid[r][c+1] = 2;
        fresh--;
        q.push(make_pair(r, c+1));
      }
        
         if(fresh == 0)
        {
          min++; 
          break;
        }

        q.pop(); sz--;

       

        if(sz == 0)
        {
        sz = q.size();
        min++;
        }

    }
        
    if(fresh == 0)    
    return min;
    else
    return -1;
        
    }
